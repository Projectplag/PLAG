/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SimilarityReportService } from "../similarityReport.service";
import { SimilarityReportCreateInput } from "./SimilarityReportCreateInput";
import { SimilarityReport } from "./SimilarityReport";
import { SimilarityReportFindManyArgs } from "./SimilarityReportFindManyArgs";
import { SimilarityReportWhereUniqueInput } from "./SimilarityReportWhereUniqueInput";
import { SimilarityReportUpdateInput } from "./SimilarityReportUpdateInput";

export class SimilarityReportControllerBase {
  constructor(protected readonly service: SimilarityReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SimilarityReport })
  async createSimilarityReport(
    @common.Body() data: SimilarityReportCreateInput
  ): Promise<SimilarityReport> {
    return await this.service.createSimilarityReport({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SimilarityReport] })
  @ApiNestedQuery(SimilarityReportFindManyArgs)
  async similarityReports(
    @common.Req() request: Request
  ): Promise<SimilarityReport[]> {
    const args = plainToClass(SimilarityReportFindManyArgs, request.query);
    return this.service.similarityReports({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SimilarityReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async similarityReport(
    @common.Param() params: SimilarityReportWhereUniqueInput
  ): Promise<SimilarityReport | null> {
    const result = await this.service.similarityReport({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SimilarityReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSimilarityReport(
    @common.Param() params: SimilarityReportWhereUniqueInput,
    @common.Body() data: SimilarityReportUpdateInput
  ): Promise<SimilarityReport | null> {
    try {
      return await this.service.updateSimilarityReport({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SimilarityReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSimilarityReport(
    @common.Param() params: SimilarityReportWhereUniqueInput
  ): Promise<SimilarityReport | null> {
    try {
      return await this.service.deleteSimilarityReport({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
