/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SimilarityReport as PrismaSimilarityReport,
  Check as PrismaCheck,
} from "@prisma/client";

export class SimilarityReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SimilarityReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.similarityReport.count(args);
  }

  async similarityReports(
    args: Prisma.SimilarityReportFindManyArgs
  ): Promise<PrismaSimilarityReport[]> {
    return this.prisma.similarityReport.findMany(args);
  }
  async similarityReport(
    args: Prisma.SimilarityReportFindUniqueArgs
  ): Promise<PrismaSimilarityReport | null> {
    return this.prisma.similarityReport.findUnique(args);
  }
  async createSimilarityReport(
    args: Prisma.SimilarityReportCreateArgs
  ): Promise<PrismaSimilarityReport> {
    return this.prisma.similarityReport.create(args);
  }
  async updateSimilarityReport(
    args: Prisma.SimilarityReportUpdateArgs
  ): Promise<PrismaSimilarityReport> {
    return this.prisma.similarityReport.update(args);
  }
  async deleteSimilarityReport(
    args: Prisma.SimilarityReportDeleteArgs
  ): Promise<PrismaSimilarityReport> {
    return this.prisma.similarityReport.delete(args);
  }

  async getCheck(parentId: string): Promise<PrismaCheck | null> {
    return this.prisma.similarityReport
      .findUnique({
        where: { id: parentId },
      })
      .check();
  }
}
