/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SimilarityReport } from "./SimilarityReport";
import { SimilarityReportCountArgs } from "./SimilarityReportCountArgs";
import { SimilarityReportFindManyArgs } from "./SimilarityReportFindManyArgs";
import { SimilarityReportFindUniqueArgs } from "./SimilarityReportFindUniqueArgs";
import { CreateSimilarityReportArgs } from "./CreateSimilarityReportArgs";
import { UpdateSimilarityReportArgs } from "./UpdateSimilarityReportArgs";
import { DeleteSimilarityReportArgs } from "./DeleteSimilarityReportArgs";
import { Check } from "../../check/base/Check";
import { SimilarityReportService } from "../similarityReport.service";
@graphql.Resolver(() => SimilarityReport)
export class SimilarityReportResolverBase {
  constructor(protected readonly service: SimilarityReportService) {}

  async _similarityReportsMeta(
    @graphql.Args() args: SimilarityReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SimilarityReport])
  async similarityReports(
    @graphql.Args() args: SimilarityReportFindManyArgs
  ): Promise<SimilarityReport[]> {
    return this.service.similarityReports(args);
  }

  @graphql.Query(() => SimilarityReport, { nullable: true })
  async similarityReport(
    @graphql.Args() args: SimilarityReportFindUniqueArgs
  ): Promise<SimilarityReport | null> {
    const result = await this.service.similarityReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SimilarityReport)
  async createSimilarityReport(
    @graphql.Args() args: CreateSimilarityReportArgs
  ): Promise<SimilarityReport> {
    return await this.service.createSimilarityReport({
      ...args,
      data: {
        ...args.data,

        check: args.data.check
          ? {
              connect: args.data.check,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SimilarityReport)
  async updateSimilarityReport(
    @graphql.Args() args: UpdateSimilarityReportArgs
  ): Promise<SimilarityReport | null> {
    try {
      return await this.service.updateSimilarityReport({
        ...args,
        data: {
          ...args.data,

          check: args.data.check
            ? {
                connect: args.data.check,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SimilarityReport)
  async deleteSimilarityReport(
    @graphql.Args() args: DeleteSimilarityReportArgs
  ): Promise<SimilarityReport | null> {
    try {
      return await this.service.deleteSimilarityReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Check, {
    nullable: true,
    name: "check",
  })
  async getCheck(
    @graphql.Parent() parent: SimilarityReport
  ): Promise<Check | null> {
    const result = await this.service.getCheck(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
