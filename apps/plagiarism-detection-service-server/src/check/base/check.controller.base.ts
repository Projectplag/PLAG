/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CheckService } from "../check.service";
import { CheckCreateInput } from "./CheckCreateInput";
import { Check } from "./Check";
import { CheckFindManyArgs } from "./CheckFindManyArgs";
import { CheckWhereUniqueInput } from "./CheckWhereUniqueInput";
import { CheckUpdateInput } from "./CheckUpdateInput";

export class CheckControllerBase {
  constructor(protected readonly service: CheckService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Check })
  async createCheck(@common.Body() data: CheckCreateInput): Promise<Check> {
    return await this.service.createCheck({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Check] })
  @ApiNestedQuery(CheckFindManyArgs)
  async checks(@common.Req() request: Request): Promise<Check[]> {
    const args = plainToClass(CheckFindManyArgs, request.query);
    return this.service.checks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Check })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async check(
    @common.Param() params: CheckWhereUniqueInput
  ): Promise<Check | null> {
    const result = await this.service.check({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Check })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCheck(
    @common.Param() params: CheckWhereUniqueInput,
    @common.Body() data: CheckUpdateInput
  ): Promise<Check | null> {
    try {
      return await this.service.updateCheck({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Check })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCheck(
    @common.Param() params: CheckWhereUniqueInput
  ): Promise<Check | null> {
    try {
      return await this.service.deleteCheck({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
